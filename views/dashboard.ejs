<!--


⠀⠀⠀⠀⠀⠀⠀⠀⢀⣞⣆⢀⣠⢶⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⢀⣀⡤⠤⠖⠒⠋⠉⣉⠉⠹⢫⠾⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⢠⡏⢰⡴⠀⠀⠀⠉⠙⠟⠃⠀⠀⠀⠈⠙⠦⣄⡀⢀⣀⣠⡤⠤⠶⠒⠒⢿⠋⠈⠀⣒⡒⠲⠤⣄⡀⠀⠀⠀⠀⠀⠀
⢸⠀⢸⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠀⠴⠂⣀⠀⠀⣴⡄⠉⢷⡄⠚⠀⢤⣒⠦⠉⠳⣄⡀⠀⠀⠀
⠸⡄⠼⠦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣄⡂⠠⣀⠐⠍⠂⠙⣆⠀⠀
⠀⠙⠦⢄⣀⣀⣀⣀⡀⠀⢷⠀⢦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠰⡇⠠⣀⠱⠘⣧⠀
⠀⠀⠀⠀⠀⠀⠀⠈⠉⢷⣧⡄⢼⠀⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠀⡈⠀⢄⢸⡄
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣿⡀⠃⠘⠂⠲⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠀⡈⢘⡇
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢫⡑⠣⠰⠀⢁⢀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⣸⠁
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣯⠂⡀⢨⠀⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡆⣾⡄⠀⠀⠀⠀⣀⠐⠁⡴⠁⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣧⡈⡀⢠⣧⣤⣀⣀⡀⢀⡀⠀⠀⢀⣼⣀⠉⡟⠀⢀⡀⠘⢓⣤⡞⠁⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢺⡁⢁⣸⡏⠀⠀⠀⠀⠁⠀⠉⠉⠁⠹⡟⢢⢱⠀⢸⣷⠶⠻⡇⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢈⡏⠈⡟⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠑⢄⠁⠀⠻⣧⠀⠀⣹⠁⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣀⡤⠚⠃⣰⣥⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⠼⢙⡷⡻⠀⡼⠁⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠟⠿⡿⠕⠊⠉⠀⠀⠀⠀⠀⠀⠀⠀⣠⣴⣶⣾⠉⣹⣷⣟⣚⣁⡼⠁⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠙⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀



-->


<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="Dashboard di Fermi Notify.">
    <meta propety="og:image" content="https://ferminotify.me/img/og-logo.png">
    <meta property="og:description" content="Fermi Notify è un servizio non ufficiale dell'IS &quot;E. Fermi&quot; Mantova che invia delle notifiche per avvisare delle variazioni dell'orario del calendario giornaliero.">
    <meta property="og:title" content="Dashboard · Fermi Notify">
    <meta property="og:type" content="website">
    <script src="/js/hamburger.js" defer></script>
    <link rel="icon" type="image/x-icon" href="/img/favicon-black.png">
    <!-- css -->
    <link rel="stylesheet" href="/css/dashboard.css" type="text/css">
    <link rel="stylesheet" href="/css/normalize.css" type="text/css">
    <link rel="stylesheet" href="/css/alertbanner.css" type="text/css">
    <link rel="stylesheet" href="/css/general.css" type="text/css">
    <link rel="stylesheet" href="/css/form.css" type="text/css">
    <link rel="stylesheet" href="/css/cercaeventi.css" type="text/css">
    <!-- js -->
    <script src="/js/submit-loading.js"></script>
    <title>Dashboard · Fermi Notify</title>
    <!-- Font Awesome -->
    <script src="https://kit.fontawesome.com/95ae55bd9a.js" crossorigin="anonymous"></script>
    <!-- Material Icon -->
	<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
    <!-- jQuery 3.6.0 -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <!-- Moment.js -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.18.1/moment.min.js"></script>

    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3511194049429500" crossorigin="anonymous"></script>
    
</head>
<body>

    <%- include('includes/cookie-min.ejs') %>

    <!-- NAVBAR -->
    <nav class="navbar">
        <div class="navbar-inner">
            <a class="logo" href="/">
                <img src="/img/nav-logo.png">
            </a>
            <a class="hamburger">
                <span class="line"></span>
                <span class="line"></span>
                <span class="line"></span>
            </a>
            <div class="nav-links">
                <ul>
                    <li>
                        <a href="./logout" class="spanHighlight"><span>&gt;</span> Logout</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <div class="content minHeight-100vh dashboard">
        <div class="section">
            <h1 class="firstTitle">Dashboard di <%= user %></h1>

            <h2 style="margin-bottom: 25px; color:#fff"><span id="greeting"></span> <span class="highlighted-text"><%= user %></span>,</h2>

            <p class="sub-description"><i class="fa-solid fa-triangle-exclamation"></i> Il sistema non è ufficialmente riconosciuto dalla presidenza dell'Istituto Superiore "Enrico Fermi" di Mantova. Eventuali malfunzionamenti sono a carico dello staff e non sono valide giustificazioni in uffici di segreteria e presidenza.</p>
        </div>

        <!-- Keyword form -->
        <div class="section">
            <h2 class="bigSectionTitle" style="margin-bottom: 5px;"><i class="fa-solid fa-key"></i> Le tue keywords</h2>

            <div class="keywords-container">
                <i class="fa-solid fa-pen-to-square keyword-edit-btn" onclick="keywordEdit()"></i>
                <ul id="keyword-list">
                    <% if (locals.keywords) { %>
                        <% keywords.forEach(kw=> { %>
                            <li class="keyword" onclick="deleteKeyword(this)">
                                <span class="keyword-list-bullet"><i class="fa-solid fa-square"></i></span>
                                <%= kw %>
                            </li>
                        <% }) %>
                    <% } %>
                </ul>


                <div class="keywords-form-container">

                    <p id="recommended-keywords-paragraph">Keywords suggerite: <span id="recommended-keywords"></span></p>
                    <form action="/keyword" method="POST" class="keywords" onsubmit="loading()" id="submitForm">
                        <input type="text" id="keyword" name="keyword" placeholder="Es. 5CIIN" class="keyword-input" required style="text-transform: uppercase;"/>
                        <script>
                            $(function() {
                                $('#keyword').keyup(function() {
                                    this.value = this.value.toLocaleUpperCase();
                                });
                            });
                        </script>

                        <button class="addButton" type="submit" id="submit-btn"><i class="fa-solid fa-chevron-right"></i></button>

                    </form>
                </div>


                <p class="sub-description" id="maggioriInfo"><i class="fa-solid fa-circle-info"></i> <span style="text-decoration: underline; text-decoration-color: var(--primary-color)">Maggiori informazioni</span></p>
                <ul class="keywords-info" id="keywordsInfo" style="display: none;">
                    <li>Aggiungi le parole chiave alla lista per essere notificat<%= gender=='M' ?'o':(gender=='F' ?'a':'ǝ') %> quando è presente un evento che la riguarda nel calendario giornaliero. Ti consigliamo di inserire la tua classe e il tuo cognome.</li>
                    <li>Per rimuovere una parola chiave, reinseriscila o clicca sul bottone <i class="fa-solid fa-pen-to-square"></i>.</li>
                    <li>Per pi&ugrave; informazioni, visita il <a href="./faq" style="text-decoration:underline">FAQ</a>.</li>
                </ul>

            </div>
        </div>

        <script>
            // edit keywords
            var is_editing = false;
            function keywordEdit(){
                is_editing = !is_editing;
                if(is_editing){
                    $(".keyword-list-bullet i").removeClass("fa-square").addClass("fa-square-xmark");
                    $(".keyword-edit-btn").css("animation", "blink 0.8s ease-in-out infinite alternate");
                    $(".keyword").addClass("keyword-editing");
                    $(".keyword").hover(function(){
                        $(this).find(".keyword-list-bullet i").removeClass("fa-square-xmark").addClass("fa-trash");
                    }, function(){
                        $(this).find(".keyword-list-bullet i").removeClass("fa-trash").addClass("fa-square-xmark");
                    });
                }else{
                    $(".keyword-list-bullet i").removeClass("fa-square-xmark").addClass("fa-square");
                    $(".keyword-edit-btn").css("animation", "none");
                    $(".keyword").removeClass("keyword-editing");
                    $(".keyword").off("mouseenter mouseleave");
                }
            }

            function deleteKeyword(kw_del){
                if(is_editing){
                    $(kw_del).remove();
                    $.ajax({
                        type: 'POST',
                        url: '/keyword',
                        data: JSON.stringify({keyword: $(kw_del).text()}),
                        success: function (data) { alert('data: ' + data); },
                        error: function (error) {
                            console.warn(error);
                        },
                        contentType: "application/json",
                        dataType: 'json'
                    });
                    
                    //events(); // TODO update events without reloading the page + update recommended keywords
                }
            }
        </script>
        <!------------------>

        <!-- Events -->
        <div class="section" id="events">
            <h2 class="bigSectionTitle"><i class="fa-solid fa-calendar-days"></i> Eventi in programma</h2>
            <div id="events-loading">
                <div class="lds-grid">
                    <div></div>
                    <div></div>
                    <div></div>
                    <div></div>
                    <div></div>
                    <div></div>
                    <div></div>
                    <div></div>
                    <div></div>
                </div>
            </div>
            <!-- today -->
            <div id="events-0" class="events-container">
                <h3 class="bigSectionSubtitle events-date" id="events-0-date"></h3>
                <div id="events-0-eventslist"></div>
            </div>
            <!-- tomorrow -->
            <div id="events-1" class="events-container">
                <h3 class="bigSectionSubtitle events-date" id="events-1-date"></h3>
                <div id="events-1-eventslist"></div>
            </div>
            <!-- dopotomorrow -->
            <div id="events-2" class="events-container">
                <h3 class="bigSectionSubtitle events-date" id="events-2-date"></h3>
                <div id="events-2-eventslist"></div>
            </div>
            <!-- dopodopotomorrow -->
            <div id="events-3" class="events-container">
                <h3 class="bigSectionSubtitle events-date" id="events-3-date"></h3>
                <div id="events-3-eventslist"></div>
            </div>
        </div>
        <!------------------>

        <!-- Telegram -->
        <div class="section" id="Telegram">
            <h2 class="bigSectionTitle"><i class="fa-brands fa-telegram"></i> Telegram</h2>
            <% if (tgun.charAt(0)==='X' ) { %>
                <p style="margin-bottom: 20px">Ricevi la notifica tramite messaggio su Telegram.</p>
                <p>Per essere notificat<%= gender=='M' ?'o':(gender=='F' ?'a':'ǝ') %> su Telegram, manda
                </p>
                <p onclick="copy()" class="telegramCodeContainer"><i class="fa-solid fa-copy"></i> <span
                        id="telegramCode"><code><%= tgun %></code></span> <span id="copied">Copiato!</span>
                </p>
                <p>a <b><a href="https://t.me/FermiNotifierBot" target="_blank"
                            class="TelegramTag">@FermiNotifierBot</a></b> su
                    Telegram.</p>
                <% } else { %>
                    <p>Il tuo account telegram risulta correttamente collegato! (ID:
                        <code><%= tgun %></code>)
                    </p>
                    <% } %>

        </div>
        <!------------------>

        <!-- ON/OFF SETTINGS -->
        <div class="section">
            <h2 class="bigSectionTitle"><i class="fa-solid fa-gear"></i> Impostazioni</h2>
            <div class="invioNotificheContainer">
                <p class="sub-description" style="padding-bottom: 10px"><i class="fa-solid fa-message"></i>
                    <span>Invio notifiche</span>
                </p>
                <div class="checkNot-container sendEmail">
                    Email
                    <label class="switch">
                        <input type="checkbox" checked class="checkbox" id="sendEmail"
                            onclick="submitPreferences()">
                        <span class="slider round"></span>
                    </label>
                </div>
                <% if (tgun.charAt(0) !='X' ) { %>
                    <div class="checkNot-container sendEmail">
                        Telegram
                        <label class="switch">
                            <input type="checkbox" checked class="checkbox" id="sendTelegram"
                                onclick="submitPreferences()">
                            <span class="slider round"></span>
                        </label>
                    </div>
                    <% } %>
            </div>

            <script>
                const submitPreferences = () => {
                    let tg = "<%= tgun.charAt(0) %>" != 'X';
                    let preferences;
                    if (tg) {
                        preferences = {
                            telegram: document.getElementById("sendTelegram").checked,
                            email: document.getElementById("sendEmail").checked
                        };
                    } else {
                        preferences = {
                            email: document.getElementById("sendEmail").checked
                        };
                    }
                    $.ajax({
                        type: 'POST',
                        url: '/notification-preferences',
                        data: JSON.stringify(preferences),
                        success: function (data) { alert('data: ' + data); },
                        error: function (error) {
                            console.warn(error);
                        },
                        contentType: "application/json",
                        dataType: 'json'
                    });
                }
            </script>

            <script>
                let preferencesId = <%= n_pref %>;
                let tg = "<%= tgun.charAt(0) %>" != 'X';
                if (tg) {
                    switch (preferencesId) {
                        case 3:
                            document.getElementById("sendTelegram").checked = true;
                            document.getElementById("sendEmail").checked = true;
                            break;
                        case 2:
                            document.getElementById("sendTelegram").checked = false;
                            document.getElementById("sendEmail").checked = true;
                            break;
                        case 1:
                            document.getElementById("sendTelegram").checked = true;
                            document.getElementById("sendEmail").checked = false;
                            break;
                        case 0:
                            document.getElementById("sendTelegram").checked = false;
                            document.getElementById("sendEmail").checked = false;
                            break;
                        default:
                            console.log("Merda.");
                    }
                } else {
                    switch (preferencesId) {
                        case 3:
                            document.getElementById("sendEmail").checked = true;
                            break;
                        case 2:
                            document.getElementById("sendEmail").checked = true;
                            break;
                        case 1:
                            document.getElementById("sendEmail").checked = false;
                            break;
                        case 0:
                            document.getElementById("sendEmail").checked = false;
                            break;
                        default:
                            console.log("Merda.");
                    }
                }
            </script>
        </div>
        <!------------------>

        <!-- Notifiche -->
        <div class="section">
            <h2 class="bigSectionTitle"><i class="fa-solid fa-bell"></i> Notifiche</h2>
            <span>&gt Hai ricevuto
                <%= n_not %> notifiche
            </span>
        </div>
        <!------------------>


        <!-- Report a problem -->
        <div class="section reportProblem">
            <p>
                <a href="mailto:master@ferminotify.me"><i class="fa-solid fa-circle-exclamation"></i> Segnala un problema</a>
            </p>
            <p>master@ferminotify.me</p>
        </div>

    </div>

    <%- include('includes/footer-min.ejs') %>

    <script>
        // copy text
        function copy() {
            var r = document.createRange();
            r.selectNode(document.getElementById("telegramCode"));
            window.getSelection().removeAllRanges();
            window.getSelection().addRange(r);
            document.execCommand('copy');
            window.getSelection().removeAllRanges();
            $('#copied').fadeIn(0);
            copiatoText();
            setTimeout(() => {
                $('#copied').fadeOut(100);
            }, 5000);
        }

        function copiatoText() {
            // array with texts to type in typewriter
            var dataText = ["Copiato!"];

            // type one text in the typwriter
            // keeps calling itself until the text is finished
            function typeWriter(text, i, fnCallback) {
                // chekc if text isn't finished yet
                if (i < (text.length)) {
                    // add next character to h1
                    document.querySelector("#copied").innerHTML = text.substring(0, i + 1) + '<span class="caret" aria-hidden="true"></span>';

                    // wait for a while and call this function again for next character
                    setTimeout(function () {
                        typeWriter(text, i + 1, fnCallback)
                    }, 100);
                }
                // text finished, call callback if there is a callback function
                else if (typeof fnCallback == 'function') {
                    // call callback after timeout
                    setTimeout(fnCallback, 700);
                }
            }
            // start a typewriter animation for a text in the dataText array
            function StartTextAnimation(i) {
                if (typeof dataText[i] == 'undefined') {
                    setTimeout(function () {
                        StartTextAnimation(0);
                    }, 20000);
                }
                // check if dataText[i] exists
                if (i < dataText[i].length) {
                    // text exists! start typewriter animation
                    typeWriter(dataText[i], 0, function () {
                    });
                }
            }
            // start the text animation
            StartTextAnimation(0);
        }
    </script>

    <script>
        let today = new Date();
        let hour = today.getHours();
        if (hour < 12) document.getElementById("greeting").innerHTML = "Buongiorno";
        else if (hour < 18) document.getElementById("greeting").innerHTML = "Buon pomeriggio";
        else document.getElementById("greeting").innerHTML = "Buona sera";
    </script>

    <script>
        const url = "https://docs.google.com/spreadsheets/d/e/2PACX-1vSn-iVUb73XGXN7qWU0S2njYO8yl8LFv0V-1a3VTU7mPB6rJUqYasGPJcmWyc1wGvjDd7IWH3qci75l/pub?gid=0&single=true&output=csv";

        // get keywords from front end list
        function getKeywords(){
            var tempArray = [];
            $(".keyword").each(function () {
                // remoce spaces unless it's between words
                tempArray.push($(this).text().replace(/\s+/g, ' ').trim());
            });
            return tempArray;
        }
        
        var keywords = getKeywords();

        if(keywords.length == 0) $(".keyword-edit-btn").hide();
        
        var eventRunning;

        console.log(keywords);

        if (keywords.length == 0) { // no keywords
            $("#events").append("<p style='color: var(--primary-color);'>Nessuna keyword inserita</p>");
            $("#events-loading").hide();
        } else {

            events();

        }

        function events(){
            keywords = getKeywords(); // get keywords again so that if a keyword is deleted it's possible to update events without reloading the page
            (async function fetchData() {
                try {
                    $('#events .error-container').remove();
                    $("#events-loading").show();
                    const response = await fetch(url);
                    $("#events-loading").hide();
                    const data = await response.text();
                    printEvents(data);
                } catch (error) {
                    console.error("Merda.\n" + error.stack);
                    // print error in the page
                    $("#events").append("<div class='error-container'><p class='errorText'><span class='errorTitle'>Errore nel caricamento degli eventi</span> <span class='errorRetry btn-nobg' onclick='events()'><span class='material-symbols-outlined'>autorenew</span> <span>Riprova</span></span></p><p class='errorDescription'>[ " + error.stack + " ]<br><a href='mailto:master@ferminotify.me?subject=Errore caricamento eventi&body=Ciao,%0D%0AHo riscontrato questo errore durante il caricamento degli eventi%0D%0A%0D%0A" + error.stack + "%0D%0A%0D%0Acon le keywords:%0D%0A" + keywords + ".%0D%0A%0D%0A%0D%0A" + moment().format("HH:mm DD/MM/YYYY") + "' style='margin-left: 5px;'><i class='fa-solid fa-circle-exclamation'></i> Clicca qui per segnalare il problema</a><br>master@ferminotify.me</p></div>");
                    $("#events-loading").hide();
                }
            })();
        }

        function printEvents(data) {

            function getEventHTML(data, startDateString, endDateString) {
                if (endDateString !== undefined) {
                    return `
                        <div class="event ${eventRunning}">
                        <p class="event-title">${data}</p>
                            <div class="event-time">
                                <p class="event-time-start">
                                    <span class="start-end-text"><span class="material-symbols-outlined">start</span></span>
                                    <span>${startDateString}</span>
                                </p>
                                <p class="event-time-end">
                                    <span class="start-end-text"><span class="material-symbols-outlined mirrorElement">start</span></span>
                                    <span>${endDateString}</span>
                                </p>
                            </div>
                        </div>
                    `;
                } else {
                    return `
                        <div class="event ${eventRunning}">
                            <p class="event-title">${data}</p>
                            <div class="event-time">
                                <p class="event-time-start">
                                    <span class="start-end-text"><span class="material-symbols-outlined">schedule</span></span>
                                    <span>${startDateString}</span>
                                </p>
                            </div>
                        </div>
                    `;
                }
            }

            var events = csv2json(data); // events csv --> json

            console.log(events);

            const weekDay=["Domenica","Lunedì","Martedì","Mercoledì","Giovedì","Venerdì","Sabato"];

            const daysShown = 4; // 0 = today, 1 = tomorrow, 2 = day after tomorrow, 3 = day after day after tomorrow

            for (let i = 0; i < daysShown; i++) {
                const html = `<span style='color: var(--primary-color)'>${getDayDescription(i)}</span><span>${weekDay[moment().add(i, 'days').isoWeekday()]} ${moment().add(i, 'days').format("DD/MM/YYYY")}</span>`;
                $(`#events-${i}-date`).html(html);
            }

            function getDayDescription(daysAhead) {
                switch (daysAhead) {
                    case 0:
                        return 'Oggi';
                    case 1:
                        return 'Domani';
                    case 2:
                        return 'Dopodomani';
                    default:
                        return `Tra ${daysAhead} giorni`;
                }
            }

            var flagThereAreEvents = false; // flag to check if there are events

            var printedUIDs = []; // array of events already printed

            var filteredEvents = []; // array of events filtered by keywords

            // search events for every keyword
            keywords.forEach(kw => {

                // regex --> kw followed by a non-word character
                // filtra eventi per keyword e per data (deve finire dopo oggi)
                filteredEvents = filteredEvents.concat(events.filter(event => (RegExp("\\b" + kw + "\\b", "i").test(event.summary) && ( moment(event["end.dateTime"], "YYYY-MM-DDTHH:mm:ss").isAfter(moment().startOf('day')) || moment(event["end.date"], "YYYY-MM-DD").isAfter(moment().startOf('day'))))));
                console.log(kw);
                console.log(filteredEvents);

            });

            // sort events by date
            filteredEvents.sort(function(a, b) {
                if (a["start.dateTime"] != null && b["start.dateTime"] != null) { // if both events have a start date and time
                    return moment(a["start.dateTime"], "YYYY-MM-DDTHH:mm:ss").diff(moment(b["start.dateTime"], "YYYY-MM-DDTHH:mm:ss"));
                } else if (a["start.dateTime"] != null && b["start.dateTime"] == null) { // if a has a start date and time and b doesn't
                    return moment(a["start.dateTime"], "YYYY-MM-DDTHH:mm:ss").diff(moment(b["start.date"], "YYYY-MM-DD"));
                } else if (a["start.dateTime"] == null && b["start.dateTime"] != null) { // if b has a start date and time and a doesn't
                    return moment(a["start.date"], "YYYY-MM-DD").diff(moment(b["start.dateTime"], "YYYY-MM-DDTHH:mm:ss"));
                } else { // if both events don't have a start date and time
                    return moment(a["start.date"], "YYYY-MM-DD").diff(moment(b["start.date"], "YYYY-MM-DD"));
                }
            });

            if(filteredEvents.length > 0) // no events for this keyword
                flagThereAreEvents = true; // there are events

            // for every event associated with the keyword
            for (var i = 0; i < filteredEvents.length; i++) {

                if(printedUIDs.includes(filteredEvents[i].uid)) // if event already printed
                    continue; // skip event

                printedUIDs.push(filteredEvents[i].uid); // event is printed

                if (filteredEvents[i]["start.dateTime"] != null) { // if event has a start date and time

                    // ora inizio --> ora fine
                    var startDate = moment(filteredEvents[i]["start.dateTime"], "YYYY-MM-DDTHH:mm:ss").format("DD/MM/YYYY HH:mm:ss");
                    var endDate = moment(filteredEvents[i]["end.dateTime"], "YYYY-MM-DDTHH:mm:ss").format("DD/MM/YYYY HH:mm:ss");

                    let tempEndDate = endDate;
                    if(endDate == startDate) // if end date == start date --> temp end date add 1 hour
                        tempEndDate = moment(filteredEvents[i]["end.dateTime"], "YYYY-MM-DDTHH:mm:ss").add(1, 'hours').format("DD/MM/YYYY HH:mm:ss");
                    if(moment(tempEndDate, "DD/MM/YYYY HH:mm:ss").isBefore(moment())) eventRunning = "event-past";
                    else if(moment().isBetween(moment(startDate, "DD/MM/YYYY HH:mm:ss"), moment(tempEndDate, "DD/MM/YYYY HH:mm:ss"))) eventRunning = "event-running";
                    else eventRunning = "";

                    // if start date == end date (same day)
                    if (moment(startDate, "DD/MM/YYYY HH:mm:ss").isSame(moment(endDate, "DD/MM/YYYY HH:mm:ss"), "day")) {

                        // for every day shown
                        for (var gg = 0; gg < daysShown; gg++) {

                            // if filteredEvents "start.date" is today + gg
                            if (moment(startDate, "DD/MM/YYYY HH:mm:ss").isSame(moment().add(gg, 'days'), "day")) {

                                $("#events-" + gg).css("display", "block");
                                // if start and end time matches --> print the time only once
                                if (moment(startDate, "DD/MM/YYYY HH:mm:ss").format("HH:mm") == moment(endDate, "DD/MM/YYYY HH:mm:ss").format("HH:mm")) {
                                    $( "#events-" + gg + "-eventslist").append(getEventHTML(filteredEvents[i]["summary"], moment(startDate, "DD/MM/YYYY HH:mm:ss").format("HH:mm")));
                                } else { // if start and end time doesn't match --> print start and end time
                                    $( "#events-" + gg + "-eventslist").append(getEventHTML(filteredEvents[i]["summary"], moment(startDate, "DD/MM/YYYY HH:mm:ss").format("HH:mm"), moment(endDate, "DD/MM/YYYY HH:mm:ss").format("HH:mm")));
                                }

                            }

                        }

                    } else { // if start date != end date --> print day and time (events that last more than one day)

                        // for every day shown
                        for (var gg = 0; gg < daysShown; gg++) {

                            if (moment(startDate, "DD/MM/YYYY HH:mm:ss").isSame(moment().add(gg, 'days'), "day")) { // if start date is today + gg
                                $("#events-" + gg).css("display", "block");
                                $( "#events-" + gg + "-eventslist").append(getEventHTML(filteredEvents[i]["summary"], moment(startDate, "DD/MM/YYYY HH:mm:ss").format("HH:mm"), moment(endDate, "DD/MM/YYYY HH:mm:ss").format("DD/MM/YYYY HH:mm")));
                            }else if(moment(endDate, "DD/MM/YYYY HH:mm:ss").isSame(moment().add(gg, 'days'), "day")){ // if end date is today + gg
                                $("#events-" + gg).css("display", "block");
                                $( "#events-" + gg + "-eventslist").append(getEventHTML(filteredEvents[i]["summary"], moment(startDate, "DD/MM/YYYY HH:mm:ss").format("DD/MM/YYYY HH:mm"), moment(endDate, "DD/MM/YYYY HH:mm:ss").format("HH:mm")));
                            }else if(moment(startDate, "DD/MM/YYYY HH:mm:ss").isBefore(moment().add(gg, 'days'), "day") && moment(endDate, "DD/MM/YYYY HH:mm:ss").isAfter(moment().add(gg, 'days'), "day")){ // if event starts before today + gg and ends after today + gg
                                $("#events-" + gg).css("display", "block");
                                $( "#events-" + gg + "-eventslist").append(getEventHTML(filteredEvents[i]["summary"], moment(startDate, "DD/MM/YYYY HH:mm:ss").format("DD/MM/YYYY HH:mm"), moment(endDate, "DD/MM/YYYY HH:mm:ss").format("DD/MM/YYYY HH:mm")));
                            }

                        }

                    }


                } else {

                    // giorno --> giorno (orario not specified)
                    var startDate = moment(filteredEvents[i]["start.date"], "YYYY-MM-DD").format("DD/MM/YYYY");
                    var endDate = moment(filteredEvents[i]["end.date"], "YYYY-MM-DD").format("DD/MM/YYYY");

                    if(moment(endDate, "DD/MM/YYYY").isBefore(moment())) eventRunning = "event-past";
                    else if(moment().isBetween(moment(startDate, "DD/MM/YYYY"), moment(endDate, "DD/MM/YYYY"))) eventRunning = "event-running";
                    else eventRunning = "";

                    // for every day shown
                    for (var gg = 0; gg < daysShown; gg++) {

                        // if starts today + gg
                        if (moment(startDate, "DD/MM/YYYY").isSame(moment().add(gg, 'days'), "day") || (moment(startDate, "DD/MM/YYYY").isBefore(moment().add(gg, 'days'), "day") && moment(endDate, "DD/MM/YYYY").isAfter(moment().add(gg, 'days'), "day"))) {

                            $("#events-" + gg).css("display", "block");
                            $( "#events-" + gg + "-eventslist").append(getEventHTML(filteredEvents[i]["summary"], moment(startDate, "DD/MM/YYYY HH:mm:ss").format("DD/MM/YYYY"), moment(endDate, "DD/MM/YYYY HH:mm:ss").format("DD/MM/YYYY")));

                        }

                    }

                }

            }

            // if there are no events --> print "Nessun evento trovato"
            if (!flagThereAreEvents) {
                $("#events").append("<p style='color: var(--primary-color);'>Nessun evento trovato</p>");
            }

            $('.events-container:visible:last').css('margin-bottom', '0');
        }


        // data is fetched in csv --> convert to json
        function csv2json(text, headers, quoteChar = '"', delimiter = ',') {
            const regex = new RegExp(`\\s*(${quoteChar})?(.*?)\\1\\s*(?:${delimiter}|$)`, 'gs');

            const match = line => [...line.matchAll(regex)]
                .map(m => m[2])  // we only want the second capture group
                .slice(0, -1);   // cut off blank match at the end

            const lines = text.split('\n');
            const heads = headers ?? match(lines.shift());

            return lines.map(line => {
                return match(line).reduce((acc, cur, i) => {
                    // Attempt to parse as a number; replace blank matches with `null`
                    const val = cur.length <= 0 ? null : Number(cur) || cur;
                    const key = heads[i] ?? `extra_${i}`;
                    return { ...acc, [key]: val };
                }, {});
            });
        }
    </script>

    <!-- SCRIPT PER SUGGERIRE KEYWORDS -->
    <script>

        // add recommended keyword
        function addRecommendedKeyword(addKw){
            if(addRecommendedKeyword.disabled) return;
            addRecommendedKeyword.disabled = true;
            // submit addKw.innerHTML with ajax
            kw2add = addKw.innerHTML;
            $.ajax({
                type: "POST",
                url: "/keyword",
                data: { keyword: kw2add },
                success: function(response) {
                    location.reload();
                },
                error: function (error) {
                    console.warn(error);
                    location.reload();
                },
            });
        }

        // fetch get class
        async function getClasse(url) {
            console.log("fetch " + url);
            const response = await fetch(url);
            const data = await response.json();
            if(data.students.length == 1) return data.students[0].classe.toUpperCase();
            else{
                console.warn(data.error + " " + data.description);
                return null;
            }
        }

        async function getRecommendedKeywords(){
            var recommendedKeywords = [];
            var recommendedKeywordsBox = document.getElementById("recommended-keywords");

            // GET LAST NAME 
            var lastname = "<%= locals.lastname %>".toUpperCase().replace(/\s+/g, ' ').trim();
            console.log("lastname: " + lastname);
            // if last name is already in keywords
            if (!keywords.some(kw => kw.toUpperCase() === lastname.toUpperCase()))
                recommendedKeywords.push(lastname);

            // GET CLASSE
            var name = "<%= locals.user %>".toUpperCase().replace(/\s+/g, ' ').trim();
            var fermiapi_getClass_url = `https://fermiapi.kliu.win/?name=${name}&surname=${lastname}`;
            var classe = await getClasse(fermiapi_getClass_url);
            if(classe != null) classe = classe.replace(/\s/g, '');
            console.log("classe: " + classe);
            if (classe && !keywords.some(kw => kw.toUpperCase() === classe.toUpperCase()))
                recommendedKeywords.push(classe);

            // divide kw with commas
            var recommendedKeywordsOutput = `<span class="highlight-hover" style="cursor:pointer;font-weight:700" onclick="addRecommendedKeyword(this.querySelector('span'))"><i class="fa-solid fa-square-plus"></i> <span>${recommendedKeywords.join('</span></span>, <span class="highlight-hover" style="cursor:pointer;font-weight:700"  onclick="addRecommendedKeyword(this.querySelector(\'span\'))"><i class="fa-solid fa-square-plus"></i> <span>')}</span></span>`;
            recommendedKeywordsBox.innerHTML = recommendedKeywordsOutput;

            if(recommendedKeywords.length > 0) document.getElementById("recommended-keywords-paragraph").style.display = "block";

            console.log("kw sugg: " + recommendedKeywords);
        }

        getRecommendedKeywords();
    </script>

    <script>
        // show/hide keywords info
        $('#maggioriInfo').click(function () {
            $('#keywordsInfo').slideToggle(500);
        });
    </script>

</body>

<!-- preload img -->
<div id="preloadedImages" style="display: none;">
    <img src="/img/loading.gif">
</div>

</html>